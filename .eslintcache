[{"/Users/samuelwright/Projects/portfolio/src/index.js":"1","/Users/samuelwright/Projects/portfolio/src/reportWebVitals.js":"2","/Users/samuelwright/Projects/portfolio/src/AppManager.js":"3","/Users/samuelwright/Projects/portfolio/src/firebase.js":"4","/Users/samuelwright/Projects/portfolio/src/Resources/mapsKey.js":"5","/Users/samuelwright/Projects/portfolio/src/Resources/firebaseKey.js":"6","/Users/samuelwright/Projects/portfolio/src/Components/index.js":"7","/Users/samuelwright/Projects/portfolio/src/Components/Footer/index.js":"8","/Users/samuelwright/Projects/portfolio/src/Components/Contact/index.js":"9","/Users/samuelwright/Projects/portfolio/src/Components/Header/index.js":"10","/Users/samuelwright/Projects/portfolio/src/Components/Location/index.js":"11","/Users/samuelwright/Projects/portfolio/src/Components/Map/index.js":"12","/Users/samuelwright/Projects/portfolio/src/Components/Projects/index.js":"13","/Users/samuelwright/Projects/portfolio/src/Components/Skills/index.js":"14","/Users/samuelwright/Projects/portfolio/src/Components/Tag/index.js":"15","/Users/samuelwright/Projects/portfolio/src/Pages/index.js":"16","/Users/samuelwright/Projects/portfolio/src/Pages/Resume/index.js":"17","/Users/samuelwright/Projects/portfolio/src/Pages/Home/index.js":"18"},{"size":493,"mtime":1653244749554,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1610654342212,"results":"21","hashOfConfig":"22"},{"size":131,"mtime":1611319188045,"results":"23","hashOfConfig":"20"},{"size":559,"mtime":1624360673141,"results":"24","hashOfConfig":"20"},{"size":80,"mtime":1641801299060,"results":"25","hashOfConfig":"20"},{"size":89,"mtime":1641441009397,"results":"26","hashOfConfig":"20"},{"size":365,"mtime":1645470836651,"results":"27","hashOfConfig":"20"},{"size":449,"mtime":1645470886785,"results":"28","hashOfConfig":"20"},{"size":7063,"mtime":1662695679469,"results":"29","hashOfConfig":"20"},{"size":7830,"mtime":1653334335483,"results":"30","hashOfConfig":"20"},{"size":406,"mtime":1645470690659,"results":"31","hashOfConfig":"20"},{"size":2230,"mtime":1645470766349,"results":"32","hashOfConfig":"20"},{"size":6712,"mtime":1662694964983,"results":"33","hashOfConfig":"20"},{"size":1953,"mtime":1653502657113,"results":"34","hashOfConfig":"20"},{"size":660,"mtime":1649739250008,"results":"35","hashOfConfig":"20"},{"size":87,"mtime":1653241379651,"results":"36","hashOfConfig":"20"},{"size":2945,"mtime":1653336177841,"results":"37","hashOfConfig":"20"},{"size":3022,"mtime":1662695242151,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"nwhp2",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10l9jrj",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"41"},"/Users/samuelwright/Projects/portfolio/src/index.js",[],["81","82"],"/Users/samuelwright/Projects/portfolio/src/reportWebVitals.js",[],"/Users/samuelwright/Projects/portfolio/src/AppManager.js",[],"/Users/samuelwright/Projects/portfolio/src/firebase.js",[],"/Users/samuelwright/Projects/portfolio/src/Resources/mapsKey.js",[],"/Users/samuelwright/Projects/portfolio/src/Resources/firebaseKey.js",[],["83","84"],"/Users/samuelwright/Projects/portfolio/src/Components/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Footer/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Contact/index.js",["85","86","87","88","89"],"import React, { Component } from 'react';\n\nimport { db } from '../../firebase';\n\nclass Contact extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            name: '',\n            email: '',\n            message: '',\n            dataSent: ''\n       }\n       this.handleSubmit = this.handleSubmit.bind(this);\n       this.resetSend = this.resetSend.bind(this)\n    }\n\n    makeid(length) {\n        var result = \"\";\n        var characters =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        var charactersLength = 10;\n        for (var i = 0; i < length; i++) {\n          result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n\n    handleSubmit(event) {\n        // Make a unique name for the message\n        var d = new Date();\n        var msgName = String(this.state.name + '-' + d.getTime());\n\n        // Get date of message\n        var date = String( d.getMonth() + 1) + '-' + String( d.getDate()) + '-' + String(d.getFullYear())\n\n        // Get time of message\n        var minutes = ()=>{\n            var a;\n            if (d.getMinutes() < 10) {\n                a = String('0' + d.getUTCMinutes());\n            } else {\n                a = String(d.getUTCMinutes());\n            }\n\n            return a;\n        }\n\n        var time = String(d.getHours()) + ':' + minutes() + '.' + String(d.getSeconds());\n        \n        // Make new id\n        var id = this.makeid(10);\n\n        // Add message to database\n        db.collection(\"messages\").doc(msgName).set({\n            name: this.state.name,\n            email: this.state.email,\n            message: this.state.message,\n            date: date,\n            time: time,\n            timezone: d.getTimezoneOffset(),\n            id: id\n        })\n        .then(() => {\n            console.log(\"Great news! Message sent successfully!\");\n            /*console.log({\n                name: this.state.name,\n                email: this.state.email,\n                message: this.state.message,\n                date: date,\n                time: time,\n                timezone: d.getTimezoneOffset(),\n                id: id\n            })*/\n        })\n        .catch((error) => {\n            console.error(\"Krikey! Error sending message: \", error);\n        });\n\n        // For component to show message was sent\n        if (!this.state.datasent){\n            this.setState({dataSent: true});\n        } \n    }\n\n    resetSend() {\n        this.setState({dataSent: false});\n    }\n    \n    render (){\n        let contactInfoStyle = {\n            textAlign: 'center',\n            fontSize: '1.2em',\n        }\n        let contactInfoStyle2 = {\n            textAlign: 'center',\n            fontSize: '.8em',\n            color: 'rgb(1,1,1,.25)',\n        }\n        let formOptionStyle = {\n            textAlign: 'center'\n        }\n        let contactFormStyle = {\n            maxWidth: 450,\n            margin: 'auto',\n            padding: '0 3%',\n        }\n        let contactFormBtn = {\n            margin: 'auto',\n            display: 'block',\n            padding: '5px 25px',\n            outline: 'none',\n            background: 'rgba(0, 187, 16, .5)',\n            border: '1pt solid white',\n            color: 'white',\n            fontSize: '1.2em',\n            borderRadius: '25px',\n        }\n        let contactFormBtn2 = {\n            margin: 'auto',\n            display: 'block',\n            padding: '5px 25px',\n            outline: 'none',\n            background: 'lightgray',\n            border: '1pt solid white',\n            color: 'white',\n            fontSize: '1.2em',\n            borderRadius: '25px',\n        }\n        \n        return (\n            <div className={\"container\"} id=\"contact-container\">\n                <div id=\"contact-header\">\n                    <h3 id=\"contact-title\"><strong>HOW CAN YOU REACH ME?</strong></h3>\n                </div>\n                <div>\n                    <p style={{\n                        textAlign: 'center',\n                        display: 'none',\n                    }}>\n                        Schedule an appointment \n                        <a style={{\n                        \n                        }} href=\"https://calendly.com/sleighs\" target=\"blank\">here</a>\n                    </p>\n                </div>\n                <div style={contactInfoStyle}>\n                    <a href=\"mailto:wsright987@gmail.com\">WSRIGHT987@GMAIL.COM</a>\n                    <br/>\n                    <a href=\"https://www.linkedin.com/in/samuelwrightdev/\">LinkedIn</a>\n                    <br/>\n                    <strong>609-472-2897</strong>\n                </div>\n                    \n                {/*this.state.dataSent ?\n                <div className=\"msg\"style={{ textAlign: 'center' }}>\n                    <br/>\n                    <p style={{ fontSize: '1.2em' }}>Great news! Message sent successfully!</p>\n                    <button className=\"new-message-btn\" style={contactFormBtn2} onClick={(e)=>{this.resetSend()}}>New Message</button>\n                </div> :\n                <form style={contactFormStyle} >\n                    <div style={formOptionStyle}>\n                        <p>Or use this contact form below:</p>\n                    </div>\n                    <div className=\"form-group\"> \n                        <label name=\"inputName\">Your Name</label>\n                        <input type=\"text\" \n                            className=\"form-control\" \n                            id=\"name-input\" \n                            name=\"name\" value={this.state.name}  \n                            onChange={(e)=>{this.setState({ name: e.target.value })}}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label name=\"inputEmail\">Your Email</label>\n                        <input type=\"email\" \n                            className=\"form-control\" \n                            id=\"email-input\" \n                            aria-describedby=\"emailHelp\" \n                            value={this.state.email} \n                            onChange={(e)=>{this.setState({ email: e.target.value })}}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label name=\"inputMessage\" className=\"form-text\">Your Message </label>\n                        <textarea type=\"text\" \n                            className=\"form-control\" \n                            id=\"message-input\" \n                            name=\"text-area\" \n                            value={this.state.message} \n                            onChange={(e)=>{this.setState({ message: e.target.value })}}\n                        />\n                    </div>\n                    <input type=\"submit\" className={\"input for-control submit\"} style={contactFormBtn} value=\"Send\" onClick={(e)=>{this.handleSubmit(e)}}/>\n                    </form>*/}\n            </div>\n        )\n    }\n}\n\nexport default Contact;","/Users/samuelwright/Projects/portfolio/src/Components/Header/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Location/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Map/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Projects/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Skills/index.js",["90"],"import React, { Component } from 'react';\nimport AppManager from '../../AppManager';\nimport '../../App.css';\n\nclass Skills extends Component {\n\tconstructor(props){\n        super(props)\n        this.state = {}\n    }\n\n    render (){\n        return (\n            <div className=\"container container-md\" id=\"skills-container\">\n\t\t\t\t<div className=\"header-box\" id=\"skills-title1\">\n\t\t\t\t\t<h3 className=\"title\"><strong>WHAT DO I DO?</strong></h3>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"do-list\">\n\t\t\t\t\t{/*!AppManager.company ? null : <p>Work at AweSumo creating software</p>*/}\n\t\t\t\t\t<p>Create fun web projects in my spare time</p>\n\t\t\t\t\t<p>Write quality code</p>\n\t\t\t\t\t<p>Keep my functions small, focused, and easy to understand</p>\n\t\t\t\t\t<p>Leave comments as I create and maintain code</p>\n\t\t\t\t\t<p>Make tests for the code I write</p>\n\t\t\t\t\t<p>Document every feature</p>\n\t\t\t\t\t<p>Keep track of every bug</p>\n\t\t\t\t\t<p>Strictly follow security best practices</p>\n\t\t\t\t\t<p>Never stop learning</p>\n\t\t\t\t</div>\n\t\t\t\t<hr/>\n\t\t\t\t<div id=\"skills2-header\">\n\t\t\t\t\t<h3 id=\"skills2-title\"><strong>WHAT DO I KNOW?</strong></h3>\n\t\t\t\t</div>\n\t\t\t\t<ul id=\"know-list\">\n\t\t\t\t\t<li>HTML, CSS, Javascript (ES5, ES6) and Typescript languages</li>\n\t\t\t\t\t<li>Node JS, MongoDB and Firebase server side technologies</li>\n\t\t\t\t\t<li>How to design user friendly UX with React, React Native, Redux, JQuery, HTML5 Canvas, SASS</li>\n\t\t\t\t\t<li>How to use a feature/dev/master branch workflow in Git</li>\n\t\t\t\t\t<li>How to design, develop, deploy and support RESTful services</li>\n\t\t\t\t\t<li>How to query and interpret Google Analytics data to make meaningful insights</li>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.props.resumePage === true \n\t\t\t\t\t\t? <li>How to test Javascript and Typescript codebases with Jest</li>\n\t\t\t\t\t\t: <li>How to make an excellent <a target=\"_blank\" href=\"https://github.com/Sleighs/google-maps-react-tutorial/\" rel=\"noreferrer\">Github Repository</a></li>\n\t\t\t\t\t}\n\t\t\t\t</ul>\n            </div>\n        )\n    }\n}\n\nexport default Skills;","/Users/samuelwright/Projects/portfolio/src/Components/Tag/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Pages/index.js",[],"/Users/samuelwright/Projects/portfolio/src/Pages/Resume/index.js",["91","92","93","94","95"],"import React, { Component, useState } from 'react';\nimport Cookies from 'universal-cookie'\nimport { \n  Header,\n  Skills,\n  Projects,\n  Location,\n  Contact,\n  Footer\n} from '../../Components';\nimport '../../App.css';\n\nconst cookiesDarkMode = new Cookies()\nconst darkModeCookies = cookiesDarkMode.get('darkModeData')\n\nclass Resume extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      textColor: 'black',\n      backgroundColor: 'white',\n      darkMode: false,\n    }\n\n    this.toggleDarkMode = this.toggleDarkMode.bind(this);\n  }\n\n  componentDidMount(){\n    if (darkModeCookies === true){\n      this.setState({\n        textColor: 'white',\n        backgroundColor: 'black',\n        darkMode: true,\n      })\n    }\n  }\n\n  toggleDarkMode(){\n    if (!this.state.darkMode){\n      this.setState({\n        textColor: 'white',\n        backgroundColor: 'black',\n        darkMode: true,\n      })\n      cookiesDarkMode.set(\n        'darkModeData', \n        true, \n        {path:'/', maxAge: 1200,}\n      )\n    } else {\n      this.setState({\n        textColor: 'black',\n        backgroundColor: 'white',\n        darkMode: false,\n      })\n      cookiesDarkMode.set(\n        'darkModeData', \n        false, \n        {path:'/', maxAge: 1200,}\n      )\n    }\n    \n  }\n\n  render() {\n    let portfolioStyle = {\n      fontSize: '1.2em',\n    }\n\n    return (\n      <div \n        style={{\n          height: '100%',\n          maxWidth: '871px',\n          margin: 'auto',\n          color: this.state.textColor,\n          backgroundColor: this.state.backgroundColor,\n        }}\n      > \n        <div \n          id=\"portfolio\" \n          className={\"container-md\"} \n          style={portfolioStyle}\n        >\n          <Header resumePage={true}/>\n          <Skills resumePage={true}/>\n          <hr/>\n          <br/>\n          <Projects resumePage={true}/>\n          <br/>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Github extends Component {\n  render() {\n    return(\n      <div id=\"github-container\" >\n        <h3 className=\"title\"><strong>DO I HAVE A GITHUB?</strong></h3>\n        <p id=\"github-text\" style={{\n            fontSize: 28,\n        }}>Yes.</p>\n        <p className='github-text'><a  href=\"http://www.github.com/sleighs\" target=\"blank\">github.com/sleighs</a></p>\n      </div>\n    )\n  }\n  \n}\n\nconst DarkMode = (props) => {\n  const { \n    modeState,\n    toggle\n  } = props\n\n  const [darkModeState, getDarkModeState] = useState(modeState)\n\n  return(\n    <div id=\"dark-mode-container\" \n      style={{\n        display: 'none',\n        position: 'absolute',\n      }}>\n      <button onClick={()=>{\n        if (darkModeState === true){\n          toggle()\n          getDarkModeState(false)\n        } else {\n          toggle()\n          getDarkModeState(true)\n        }\n\n        console.log('darkMode ', modeState )\n      }}>\n        {modeState === true ? 'Dark On' : 'Light On'}\n      </button>\n    </div>\n  )\n}\n\nexport default Resume;\n","/Users/samuelwright/Projects/portfolio/src/Pages/Home/index.js",["96"],"import React, { Component, useState } from 'react';\nimport Cookies from 'universal-cookie'\nimport { \n  Header,\n  Skills,\n  Projects,\n  Location,\n  Contact,\n  Footer\n} from '../../Components';\nimport '../../App.css';\n\nconst cookiesDarkMode = new Cookies()\nconst darkModeCookies = cookiesDarkMode.get('darkModeData')\n\nclass Home extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      textColor: 'black',\n      backgroundColor: 'white',\n      darkMode: false,\n    }\n\n    this.toggleDarkMode = this.toggleDarkMode.bind(this);\n  }\n\n  componentDidMount(){\n    if (darkModeCookies === true){\n      this.setState({\n        textColor: 'white',\n        backgroundColor: 'black',\n        darkMode: true,\n      })\n    }\n  }\n\n  toggleDarkMode(){\n    if (!this.state.darkMode){\n      this.setState({\n        textColor: 'white',\n        backgroundColor: 'black',\n        darkMode: true,\n      })\n      cookiesDarkMode.set(\n        'darkModeData', \n        true, \n        {path:'/', maxAge: 1200,}\n      )\n    } else {\n      this.setState({\n        textColor: 'black',\n        backgroundColor: 'white',\n        darkMode: false,\n      })\n      cookiesDarkMode.set(\n        'darkModeData', \n        false, \n        {path:'/', maxAge: 1200,}\n      )\n    }\n    \n  }\n\n  render() {\n    let portfolioStyle = {\n      fontSize: '1.2em',\n    }\n\n    return (\n      <div \n        style={{\n          height: '100%',\n          maxWidth: '871px',\n          margin: 'auto',\n          color: this.state.textColor,\n          backgroundColor: this.state.backgroundColor,\n        }}\n      > \n        <div \n          id=\"portfolio\" \n          className={\"container-md\"} \n          style={portfolioStyle}\n        >\n          <DarkMode toggle={this.toggleDarkMode} modeState={this.state.darkMode}/>\n          <Header  resumePage={false}/>\n          <Skills />\n          <hr/>\n          <Projects />\n          <hr/>\n          <Github />\n          {/*<hr/>\n          <Location />*/}\n          <hr/>\n          <Contact />\n          <hr/>\n          <Footer />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\n\nclass Github extends Component {\n  render() {\n    return(\n      <div id=\"github-container\" >\n        <h3 className=\"title\"><strong>DO I HAVE A GITHUB?</strong></h3>\n        <p id=\"github-text\"><a  href=\"http://www.github.com/sleighs\" target=\"blank\">Yes.</a></p>\n      </div>\n    )\n  }\n  \n}\n\nconst DarkMode = (props) => {\n  const { \n    modeState,\n    toggle\n  } = props\n\n  const [darkModeState, getDarkModeState] = useState(modeState)\n\n  return(\n    <div id=\"dark-mode-container\" \n      style={{\n        display: 'none',\n        position: 'absolute',\n      }}>\n      <button onClick={()=>{\n        if (darkModeState === true){\n          toggle()\n          getDarkModeState(false)\n        } else {\n          toggle()\n          getDarkModeState(true)\n        }\n\n        console.log('darkMode ', modeState )\n      }}>\n        {modeState === true ? 'Dark On' : 'Light On'}\n      </button>\n    </div>\n  )\n}\n\nexport default Home;\n",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"97","replacedBy":"101"},{"ruleId":"99","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":96,"column":13,"nodeType":"105","messageId":"106","endLine":96,"endColumn":30},{"ruleId":"103","severity":1,"message":"107","line":101,"column":13,"nodeType":"105","messageId":"106","endLine":101,"endColumn":28},{"ruleId":"103","severity":1,"message":"108","line":104,"column":13,"nodeType":"105","messageId":"106","endLine":104,"endColumn":29},{"ruleId":"103","severity":1,"message":"109","line":109,"column":13,"nodeType":"105","messageId":"106","endLine":109,"endColumn":27},{"ruleId":"103","severity":1,"message":"110","line":120,"column":13,"nodeType":"105","messageId":"106","endLine":120,"endColumn":28},{"ruleId":"103","severity":1,"message":"111","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":18},{"ruleId":"103","severity":1,"message":"112","line":7,"column":3,"nodeType":"105","messageId":"106","endLine":7,"endColumn":11},{"ruleId":"103","severity":1,"message":"113","line":8,"column":3,"nodeType":"105","messageId":"106","endLine":8,"endColumn":10},{"ruleId":"103","severity":1,"message":"114","line":9,"column":3,"nodeType":"105","messageId":"106","endLine":9,"endColumn":9},{"ruleId":"103","severity":1,"message":"115","line":98,"column":7,"nodeType":"105","messageId":"106","endLine":98,"endColumn":13},{"ruleId":"103","severity":1,"message":"116","line":113,"column":7,"nodeType":"105","messageId":"106","endLine":113,"endColumn":15},{"ruleId":"103","severity":1,"message":"112","line":7,"column":3,"nodeType":"105","messageId":"106","endLine":7,"endColumn":11},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],["117"],["118"],"no-unused-vars","'contactInfoStyle2' is assigned a value but never used.","Identifier","unusedVar","'formOptionStyle' is assigned a value but never used.","'contactFormStyle' is assigned a value but never used.","'contactFormBtn' is assigned a value but never used.","'contactFormBtn2' is assigned a value but never used.","'AppManager' is defined but never used.","'Location' is defined but never used.","'Contact' is defined but never used.","'Footer' is defined but never used.","'Github' is defined but never used.","'DarkMode' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]