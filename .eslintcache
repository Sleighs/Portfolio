[{"/Users/samuelwright/Projects/portfolio/src/index.js":"1","/Users/samuelwright/Projects/portfolio/src/reportWebVitals.js":"2","/Users/samuelwright/Projects/portfolio/src/Components/Header.js":"3","/Users/samuelwright/Projects/portfolio/src/AppManager.js":"4","/Users/samuelwright/Projects/portfolio/src/Components/Skills.js":"5","/Users/samuelwright/Projects/portfolio/src/Components/Map.js":"6","/Users/samuelwright/Projects/portfolio/src/Components/Projects.js":"7","/Users/samuelwright/Projects/portfolio/src/Components/Contact.js":"8","/Users/samuelwright/Projects/portfolio/src/Portfolio.js":"9","/Users/samuelwright/Projects/portfolio/src/Components/Location.js":"10","/Users/samuelwright/Projects/portfolio/src/Components/Footer.js":"11","/Users/samuelwright/Projects/portfolio/src/Resources/config.js":"12","/Users/samuelwright/Projects/portfolio/src/firebase.js":"13"},{"size":270,"mtime":1613350247191,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1610654342212,"results":"16","hashOfConfig":"15"},{"size":5658,"mtime":1611382992576,"results":"17","hashOfConfig":"15"},{"size":131,"mtime":1611319188045,"results":"18","hashOfConfig":"15"},{"size":1621,"mtime":1611652117618,"results":"19","hashOfConfig":"15"},{"size":2218,"mtime":1611322025035,"results":"20","hashOfConfig":"15"},{"size":2673,"mtime":1611878587700,"results":"21","hashOfConfig":"15"},{"size":6436,"mtime":1613361050234,"results":"22","hashOfConfig":"15"},{"size":1271,"mtime":1611521752408,"results":"23","hashOfConfig":"15"},{"size":420,"mtime":1611226796257,"results":"24","hashOfConfig":"15"},{"size":450,"mtime":1611303270508,"results":"25","hashOfConfig":"15"},{"size":210,"mtime":1611652784961,"results":"26","hashOfConfig":"15"},{"size":539,"mtime":1613350250210,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"10l9jrj",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samuelwright/Projects/portfolio/src/index.js",[],["57","58"],"/Users/samuelwright/Projects/portfolio/src/reportWebVitals.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Header.js",[],"/Users/samuelwright/Projects/portfolio/src/AppManager.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Skills.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Map.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Projects.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Contact.js",["59"],"import React, { Component } from 'react';\nimport firebase from 'firebase';\nimport { db }from '../firebase';\n\nclass Contact extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            name: '',\n            email: '',\n            message: '',\n            dataSent: ''\n       }\n       this.handleSubmit = this.handleSubmit.bind(this);\n       this.resetSend = this.resetSend.bind(this)\n    }\n\n    makeid(length) {\n        var result = \"\";\n        var characters =\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        var charactersLength = 10;\n        for (var i = 0; i < length; i++) {\n          result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    }\n\n    handleSubmit(event) {\n        // Make a unique name for the message\n        var d = new Date();\n        var msgName = String(this.state.name + '-' + d.getTime()/* + '-' + this.makeid()*/);\n\n        // Get date of message\n        var date = String( d.getMonth() + 1) + '-' + String( d.getDate()) + '-' + String(d.getFullYear())\n\n        // Get time of message\n        var minutes = ()=>{\n            var a;\n            if (d.getMinutes() < 10) {\n                a = String('0' + d.getUTCMinutes());\n            } else {\n                a = String(d.getUTCMinutes());\n            }\n\n            return a;\n        }\n\n        var time = String(d.getHours()) + ':' + minutes() + '.' + String(d.getSeconds());\n        \n        // Make new id\n        var id = this.makeid();\n\n        // Add message to database\n        db.collection(\"messages\").doc(msgName).set({\n            name: this.state.name,\n            email: this.state.email,\n            message: this.state.message,\n            date: date,\n            time: time,\n            timezone: d.getTimezoneOffset(),\n            id: id\n        })\n        .then(() => {\n            console.log(\"Great news! Message sent successfully!\");\n            /*console.log({\n                name: this.state.name,\n                email: this.state.email,\n                message: this.state.message,\n                date: date,\n                time: time,\n                timezone: d.getTimezoneOffset(),\n                id: id\n            })*/\n        })\n        .catch((error) => {\n            console.error(\"Krikey! Error sending message: \", error);\n        });\n\n        // For component to show message was sent\n        if (!this.state.datasent){\n            this.setState({dataSent: true});\n        } \n    }\n\n    resetSend() {\n        this.setState({dataSent: false});\n    }\n    \n    render (){\n        let contactInfoStyle = {\n            textAlign: 'center',\n            fontSize: '1.2em'\n        }\n        let formOptionStyle = {\n            textAlign: 'center'\n        }\n        let contactFormStyle = {\n            maxWidth: 450,\n            margin: 'auto',\n            padding: '0 3%'\n        }\n        let contactFormBtn = {\n            margin: 'auto',\n            display: 'block',\n            padding: '5px 25px',\n            outline: 'none',\n            background: 'rgba(0, 187, 16, .5)',\n            border: '1pt solid white',\n            color: 'white',\n            fontSize: '1.2em',\n            borderRadius: '25px'\n        }\n        let contactFormBtn2 = {\n            margin: 'auto',\n            display: 'block',\n            padding: '5px 25px',\n            outline: 'none',\n            background: 'lightgray',\n            border: '1pt solid white',\n            color: 'white',\n            fontSize: '1.2em',\n            borderRadius: '25px'\n        }\n        \n        return (\n            <div className={\"container\"} id=\"contact-container\">\n                <div id=\"contact-header\">\n                    <h3 id=\"contact-title\"><strong>HOW CAN YOU REACH ME?</strong></h3>\n                </div>\n                <div style={contactInfoStyle}>\n                    <a href=\"mailto:wsright987@gmail.com\">WSRIGHT987@GMAIL.COM</a>\n                    <br/>\n                    <strong>609-472-2897</strong>\n                </div>\n                    \n                {this.state.dataSent ?\n                <div className=\"msg\"style={{ textAlign: 'center' }}>\n                    <br/>\n                    <p style={{ fontSize: '1.2em' }}>Great news! Message sent successfully!</p>\n                    <button className=\"new-message-btn\" style={contactFormBtn2} onClick={(e)=>{this.resetSend()}}>New Message</button>\n                </div> :\n                <form style={contactFormStyle} >\n                    <div style={formOptionStyle}>\n                        <p>Or use this contact form below:</p>\n                    </div>\n                    <div className=\"form-group\"> \n                        <label name=\"inputName\">Your Name</label>\n                        <input type=\"text\" \n                            className=\"form-control\" \n                            id=\"name-input\" \n                            name=\"name\" value={this.state.name}  \n                            onChange={(e)=>{this.setState({ name: e.target.value })}}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label name=\"inputEmail\">Your Email</label>\n                        <input type=\"email\" \n                            className=\"form-control\" \n                            id=\"email-input\" \n                            aria-describedby=\"emailHelp\" \n                            value={this.state.email} \n                            onChange={(e)=>{this.setState({ email: e.target.value })}}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label name=\"inputMessage\" className=\"form-text\">Your Message </label>\n                        <textarea type=\"text\" \n                            className=\"form-control\" \n                            id=\"message-input\" \n                            name=\"text-area\" \n                            value={this.state.message} \n                            onChange={(e)=>{this.setState({ message: e.target.value })}}\n                        />\n                    </div>\n                    <input type=\"submit\" className={\"input for-control submit\"} style={contactFormBtn} value=\"Send\" onClick={(e)=>{this.handleSubmit(e)}}/>\n                </form>}\n            </div>\n        )\n    }\n}\n\nexport default Contact;","/Users/samuelwright/Projects/portfolio/src/Portfolio.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Location.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Footer.js",[],"/Users/samuelwright/Projects/portfolio/src/Resources/config.js",[],["60","61"],"/Users/samuelwright/Projects/portfolio/src/firebase.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":16},{"ruleId":"62","replacedBy":"70"},{"ruleId":"64","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar",["72"],["73"],"no-global-assign","no-unsafe-negation"]