[{"/Users/samuelwright/Projects/portfolio/src/index.js":"1","/Users/samuelwright/Projects/portfolio/src/reportWebVitals.js":"2","/Users/samuelwright/Projects/portfolio/src/Components/Portfolio.js":"3","/Users/samuelwright/Projects/portfolio/src/Components/Header.js":"4","/Users/samuelwright/Projects/portfolio/src/AppManager.js":"5","/Users/samuelwright/Projects/portfolio/src/Components/Skills.js":"6"},{"size":409,"mtime":1610664995893,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610654342212,"results":"9","hashOfConfig":"8"},{"size":300,"mtime":1610664868638,"results":"10","hashOfConfig":"8"},{"size":4343,"mtime":1610659317072,"results":"11","hashOfConfig":"8"},{"size":68,"mtime":1610658682514,"results":"12","hashOfConfig":"8"},{"size":562,"mtime":1610664865857,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"10l9jrj",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},"/Users/samuelwright/Projects/portfolio/src/index.js",["29","30"],"/Users/samuelwright/Projects/portfolio/src/reportWebVitals.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Portfolio.js",[],["31","32"],"/Users/samuelwright/Projects/portfolio/src/Components/Header.js",["33","34","35","36"],"import React, { Component } from 'react';\n\nimport AppManager from '../AppManager';\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // The algorithm types and deletes each word in the array\n            arr: [\"ENGINEER\", \"ARCHITECT\", \"DEVELOPER\"],\n            pos: 0,\n            text: null,\n            typedText: [],\n            newText: \"\",\n            a: [],\n            reverse: false,\n            interval: null,\n            n: 'start'\n        }\n\n        this.init = this.init.bind(this);\n        this.getText = this.getText.bind(this);\n    }\n\n    getText() {\n        var name = document.getElementById(\"name\");\n        var title = document.getElementById(\"title\");\n        var log = document.getElementById(\"log\");\n        var initBtn = document.getElementById(\"init-btn\");\n\n        // Get word from array\n        var word = this.state.arr[this.state.pos];\n        // Transform word from string to array\n        var newArr = word.split(\"\");\n\n        var text = this.state.arr[this.state.pos];\n\n        var typedText = this.state.typedText;\n        var reverse = this.state.reverse;\n        var a = this.state.a;\n        var newText = this.state.newText;\n      \n        //count += 1;\n      \n        // Delete text if reverse is true\n        if (reverse === true) {\n          // Remove last letter from word\n          typedText.splice(-1, 1);\n          // Build new word\n          for (var i = a.length; i > typedText.length; i--) {\n            a.splice(-1, 1);\n            newText = a.join(\"\");\n      \n            // Once word is fully deleted switch to next word\n            if (a.join(\"\") === \"\") {\n              typedText = [];\n              reverse = false;\n      \n              //close after one cycle through word list\n              if (this.state.pos === this.state.arr.length - 1) {\n                  this.setState({\n                    n: \"start\"\n                  });\n                  initBtn.innerHTML = \"Start\";\n                  \n                  clearInterval(AppManager.interval);\n              }\n      \n              // Move to next word or return to first word if at last word\n              if (this.state.pos < this.state.arr.length - 1) {\n                this.setState({\n                    pos: this.state.pos + 1\n                });\n              } else {\n                this.setState({\n                    pos: 0\n                });\n              }\n            }\n          }\n      \n          // Type word if reverse is false\n        } else if (!this.state.reverse) {\n          a = [];\n\n          // Add next letter in word\n          typedText.push(newArr[typedText.length]);\n      \n          // Create new word\n          for (var j = 0; j < typedText.length; j++) {\n            a.push(newArr[j]);\n            newText = a.join(\"\");\n      \n            // If new word equals complete word make reverse true to begin delete animation\n            if (a.join(\"\") === word) {\n              reverse = true;\n            }\n          }\n        }\n\n        this.setState({\n            typedText: typedText,\n            reverse: reverse,\n            a: a,\n            newText: newText\n\n        })\n      }\n            \n      init(type) {\n        var initBtn = document.getElementById(\"init-btn\");\n        var log = document.getElementById(\"log\");\n\n        //var rand;\n      \n        if (type === \"stop\") {\n            this.setState({\n                n: 'start'\n            });\n          \n          initBtn.innerHTML = \"Start\";\n          clearInterval(AppManager.interval);\n        }\n      \n        if (type === \"start\") {\n            this.setState({\n                n: 'stop'\n            });\n\n            AppManager.interval = setInterval((interval) => {\n                this.getText();\n                log.innerHTML = this.state.newText;\n            }, 175)\n            initBtn.innerHTML = \"Stop\";\n        }\n      }\n\n    render (){\n        return (\n            <div className=\"header-container\">\n                <span id=\"name\">Samuel Wright</span>\n                <br/>\n                <span id=\"title\">SOFTWARE </span>\n                <span id=\"log\"></span>\n                <span id='glyph'> |</span>\n                <button id={'init-btn'} onClick={ ()=>{this.init(this.state.n)} }>Start</button>\n            </div>\n        )\n    }\n}\n\nexport default Header;","/Users/samuelwright/Projects/portfolio/src/AppManager.js",[],"/Users/samuelwright/Projects/portfolio/src/Components/Skills.js",["37"],"import React, { Component } from 'react';\n\nimport AppManager from '../AppManager';\n\nclass Skills extends Component {\n\n\n    render (){\n        return (\n            <div className=\"header-container\">\n                <span id=\"name\">Samuel Wright</span>\n                <br/>\n                <span id=\"title\">SOFTWARE </span>\n                <span id=\"log\"></span>\n                <span id='glyph'> |</span>\n                <button id={'init-btn'} onClick={ ()=>{this.init(this.state.n)} }>Start</button>\n            </div>\n        )\n    }\n}\n\nexport default Skills;",{"ruleId":"38","severity":1,"message":"39","line":5,"column":10,"nodeType":"40","messageId":"41","endLine":5,"endColumn":27},{"ruleId":"38","severity":1,"message":"42","line":6,"column":10,"nodeType":"40","messageId":"41","endLine":6,"endColumn":21},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"38","severity":1,"message":"47","line":26,"column":13,"nodeType":"40","messageId":"41","endLine":26,"endColumn":17},{"ruleId":"38","severity":1,"message":"48","line":27,"column":13,"nodeType":"40","messageId":"41","endLine":27,"endColumn":18},{"ruleId":"38","severity":1,"message":"49","line":28,"column":13,"nodeType":"40","messageId":"41","endLine":28,"endColumn":16},{"ruleId":"38","severity":1,"message":"50","line":36,"column":13,"nodeType":"40","messageId":"41","endLine":36,"endColumn":17},{"ruleId":"38","severity":1,"message":"51","line":3,"column":8,"nodeType":"40","messageId":"41","endLine":3,"endColumn":18},"no-unused-vars","'ReactReduxContext' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","no-native-reassign",["52"],"no-negated-in-lhs",["53"],"'name' is assigned a value but never used.","'title' is assigned a value but never used.","'log' is assigned a value but never used.","'text' is assigned a value but never used.","'AppManager' is defined but never used.","no-global-assign","no-unsafe-negation"]