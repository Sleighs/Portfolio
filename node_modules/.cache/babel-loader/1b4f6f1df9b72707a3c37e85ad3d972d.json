{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/samuelwright/Projects/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";var ThemeContext=/*#__PURE__*/React.createContext();function ThemeContextProvider(props){var _useState=useState('dark'),_useState2=_slicedToArray(_useState,2),theme=_useState2[0],setTheme=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),lightbulb=_useState4[0],setLightbulb=_useState4[1];var changeTheme=function changeTheme(){if(theme==='light'){setTheme('dark');}else{setTheme('light');}};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme:theme,setTheme:setTheme,lightbulb:lightbulb,setLightbulb:setLightbulb,changeTheme:changeTheme},children:props.children});}export{ThemeContext,ThemeContextProvider};","map":{"version":3,"sources":["/Users/samuelwright/Projects/portfolio/src/Context/ThemeContext.js"],"names":["React","useState","ThemeContext","createContext","ThemeContextProvider","props","theme","setTheme","lightbulb","setLightbulb","changeTheme","children"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CAEA,GAAMC,CAAAA,YAAY,cAAGF,KAAK,CAACG,aAAN,EAArB,CAEA,QAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAoC,eACRJ,QAAQ,CAAC,MAAD,CADA,wCAC3BK,KAD2B,eACpBC,QADoB,8BAEAN,QAAQ,CAAC,KAAD,CAFR,yCAE3BO,SAF2B,eAEhBC,YAFgB,eAIlC,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAIJ,KAAK,GAAK,OAAd,CAAsB,CAACC,QAAQ,CAAC,MAAD,CAAR,CAAiB,CAAxC,IAA8C,CAACA,QAAQ,CAAC,OAAD,CAAR,CAAkB,CAClE,CAFD,CAIA,mBACE,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAC1BD,KAAK,CAALA,KAD0B,CAE1BC,QAAQ,CAARA,QAF0B,CAG1BC,SAAS,CAATA,SAH0B,CAI1BC,YAAY,CAAZA,YAJ0B,CAK1BC,WAAW,CAAXA,WAL0B,CAA9B,UAOKL,KAAK,CAACM,QAPX,EADF,CAWD,CAED,OAAQT,YAAR,CAAsBE,oBAAtB","sourcesContent":["import React, {useState} from \"react\"\n\nconst ThemeContext = React.createContext()\n\nfunction ThemeContextProvider(props){ \n  const [theme, setTheme] = useState('dark');\n  const [lightbulb, setLightbulb] = useState(false);\n  \n  const changeTheme = () => {\n    if (theme === 'light'){setTheme('dark')} else {setTheme('light')}\n  };\n\n  return (\n    <ThemeContext.Provider value={{\n        theme, \n        setTheme,\n        lightbulb, \n        setLightbulb,\n        changeTheme\n    }}>\n        {props.children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport {ThemeContext, ThemeContextProvider}"]},"metadata":{},"sourceType":"module"}