{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samuelwright/Projects/portfolio/src/Components/Header.js\";\nimport React, { Component } from 'react';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // The algorithm types and deletes each word in the array\n      arr: [\"ENGINEER\", \"ARCHITECT\", \"DEVELOPER\"],\n      pos: 0,\n      text: this.state.arr[this.state.pos],\n      typedText: [],\n      newText: \"\",\n      a: [],\n      reverse: false,\n      interval: null,\n      n: 'start'\n    };\n    this.init = this.init.bind(this);\n    this.getText = this.getText.bind(this);\n  }\n\n  getText() {\n    var name = document.getElementById(\"name\");\n    var title = document.getElementById(\"title\");\n    var log = document.getElementById(\"log\");\n    var initBtn = document.getElementById(\"init-btn\"); // Get word from array\n\n    var word = this.state.arr[this.state.pos]; // Transform word from string to array\n\n    var newArr = word.split(\"\"); //count += 1;\n    // Delete text if reverse is true\n\n    if (this.state.reverse === true) {\n      // Remove last letter from word\n      this.state.typedText.splice(-1, 1); // Build new word\n\n      for (var i = this.state.a.length; i > this.state.typedText.length; i--) {\n        this.state.a.splice(-1, 1);\n        newText = this.state.a.join(\"\"); // Once word is fully deleted switch to next word\n\n        if (this.state.a.join(\"\") === \"\") {\n          this.setState({\n            typedText: [],\n            reverse: false\n          }); //close after one cycle through word list\n\n          if (this.state.pos === this.state.arr.length - 1) {\n            this.setState({\n              n: \"start\"\n            });\n            initBtn.innerHTML = \"Start\";\n            clearInterval(this.state.interval);\n          } // Move to next word or return to first word if at last word\n\n\n          if (pos < arr.length - 1) {\n            pos += 1;\n          } else {\n            pos = 0;\n          }\n        }\n      } // Type word if reverse is false\n\n    } else if (!reverse) {\n      a = []; // Add next letter in word\n\n      typedText.push(newArr[typedText.length]); // Create new word\n\n      for (var j = 0; j < typedText.length; j++) {\n        a.push(newArr[j]);\n        newText = a.join(\"\"); // If new word equals complete word make reverse true to begin delete animation\n\n        if (a.join(\"\") === word) {\n          reverse = true;\n        }\n      }\n    }\n  }\n\n  init(type) {\n    var rand;\n\n    if (type === \"stop\") {\n      n = \"start\";\n      initBtn.innerHTML = \"Start\";\n      clearInterval(interval);\n    }\n\n    if (type === \"start\") {\n      n = \"stop\";\n      initBtn.innerHTML = \"Stop\";\n      interval = setInterval(interval => {\n        getText();\n        log.innerHTML = newText;\n      }, 175);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"name\",\n        children: \"Samuel Wright\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"title\",\n        children: \"SOFTWARE \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"glyph\",\n        children: \" |\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Header;","map":{"version":3,"sources":["/Users/samuelwright/Projects/portfolio/src/Components/Header.js"],"names":["React","Component","Header","constructor","props","state","arr","pos","text","typedText","newText","a","reverse","interval","n","init","bind","getText","name","document","getElementById","title","log","initBtn","word","newArr","split","splice","i","length","join","setState","innerHTML","clearInterval","push","j","type","rand","setInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // The algorithm types and deletes each word in the array\n            arr: [\"ENGINEER\", \"ARCHITECT\", \"DEVELOPER\"],\n            pos: 0,\n            text: this.state.arr[this.state.pos],\n            typedText: [],\n            newText: \"\",\n            a: [],\n            reverse: false,\n            interval: null,\n            n: 'start'\n        }\n\n        this.init = this.init.bind(this);\n        this.getText = this.getText.bind(this);\n    }\n\n    getText() {\n        var name = document.getElementById(\"name\");\n        var title = document.getElementById(\"title\");\n        var log = document.getElementById(\"log\");\n        var initBtn = document.getElementById(\"init-btn\");\n\n        // Get word from array\n        var word = this.state.arr[this.state.pos];\n        // Transform word from string to array\n        var newArr = word.split(\"\");\n      \n        //count += 1;\n      \n        // Delete text if reverse is true\n        if (this.state.reverse === true) {\n          // Remove last letter from word\n          this.state.typedText.splice(-1, 1);\n          // Build new word\n          for (var i = this.state.a.length; i > this.state.typedText.length; i--) {\n            this.state.a.splice(-1, 1);\n            newText = this.state.a.join(\"\");\n      \n            // Once word is fully deleted switch to next word\n            if (this.state.a.join(\"\") === \"\") {\n              this.setState({\n                  typedText: [],\n                  reverse: false\n                });\n            \n      \n              //close after one cycle through word list\n              if (this.state.pos === this.state.arr.length - 1) {\n                  this.setState({\n                    n: \"start\"\n                  });\n                  initBtn.innerHTML = \"Start\";\n                  \n                \n                  clearInterval(this.state.interval);\n              }\n      \n              // Move to next word or return to first word if at last word\n              if (pos < arr.length - 1) {\n                pos += 1;\n              } else {\n                pos = 0;\n              }\n            }\n          }\n      \n          // Type word if reverse is false\n        } else if (!reverse) {\n          a = [];\n          // Add next letter in word\n          typedText.push(newArr[typedText.length]);\n      \n          // Create new word\n          for (var j = 0; j < typedText.length; j++) {\n            a.push(newArr[j]);\n            newText = a.join(\"\");\n      \n            // If new word equals complete word make reverse true to begin delete animation\n            if (a.join(\"\") === word) {\n              reverse = true;\n            }\n          }\n        }\n      }\n            \n      init(type) {\n        var rand;\n      \n        if (type === \"stop\") {\n          n = \"start\";\n          initBtn.innerHTML = \"Start\";\n          clearInterval(interval);\n        }\n      \n        if (type === \"start\") {\n          n = \"stop\";\n          initBtn.innerHTML = \"Stop\";\n          interval = setInterval((interval) => {\n            getText();\n            log.innerHTML = newText;\n          }, 175);\n        }\n      }\n\n    render (){\n        return (\n            <div className=\"header-container\">\n                <span id=\"name\">Samuel Wright</span>\n                <br/>\n                <span id=\"title\">SOFTWARE </span>\n                <span id=\"log\"></span>\n                <span id='glyph'> |</span>\n            </div>\n        )\n    }\n}\n\nexport default Header;"]},"metadata":{},"sourceType":"module"}