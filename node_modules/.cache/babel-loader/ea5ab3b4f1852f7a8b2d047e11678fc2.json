{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, OrthographicCamera, Mesh } from 'three';\n\nclass Pass {\n  constructor() {\n    this.isPass = true; // if set to true, the pass is processed by the composer\n\n    this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n    this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n    this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n    this.renderToScreen = false;\n  }\n\n  setSize()\n  /* width, height */\n  {}\n\n  render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n\n  dispose() {}\n\n} // Helper for passes that need to fill the viewport with a single quad.\n\n\nconst _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1); // https://github.com/mrdoob/three.js/pull/21358\n\n\nconst _geometry = new BufferGeometry();\n\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\n\nclass FullScreenQuad {\n  constructor(material) {\n    this._mesh = new Mesh(_geometry, material);\n  }\n\n  dispose() {\n    this._mesh.geometry.dispose();\n  }\n\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n\n  get material() {\n    return this._mesh.material;\n  }\n\n  set material(value) {\n    this._mesh.material = value;\n  }\n\n}\n\nexport { Pass, FullScreenQuad };","map":{"version":3,"sources":["/Users/samuelwright/Projects/portfolio/node_modules/three/examples/jsm/postprocessing/Pass.js"],"names":["BufferGeometry","Float32BufferAttribute","OrthographicCamera","Mesh","Pass","constructor","isPass","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","dispose","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","renderer","value"],"mappings":"AAAA,SACCA,cADD,EAECC,sBAFD,EAGCC,kBAHD,EAICC,IAJD,QAKO,OALP;;AAOA,MAAMC,IAAN,CAAW;AAEVC,EAAAA,WAAW,GAAG;AAEb,SAAKC,MAAL,GAAc,IAAd,CAFa,CAIb;;AACA,SAAKC,OAAL,GAAe,IAAf,CALa,CAOb;;AACA,SAAKC,SAAL,GAAiB,IAAjB,CARa,CAUb;;AACA,SAAKC,KAAL,GAAa,KAAb,CAXa,CAab;;AACA,SAAKC,cAAL,GAAsB,KAAtB;AAEA;;AAEDC,EAAAA,OAAO;AAAE;AAAsB,GAAE;;AAEjCC,EAAAA,MAAM;AAAE;AAAiE;AAExEC,IAAAA,OAAO,CAACC,KAAR,CAAe,4DAAf;AAEA;;AAEDC,EAAAA,OAAO,GAAG,CAAE;;AA5BF,C,CAgCX;;;AAEA,MAAMC,OAAO,GAAG,IAAId,kBAAJ,CAAwB,CAAE,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAE,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAAhB,C,CAEA;;;AAEA,MAAMe,SAAS,GAAG,IAAIjB,cAAJ,EAAlB;;AACAiB,SAAS,CAACC,YAAV,CAAwB,UAAxB,EAAoC,IAAIjB,sBAAJ,CAA4B,CAAE,CAAE,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAE,CAAf,EAAkB,CAAE,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAAE,CAA/B,EAAkC,CAAlC,CAA5B,EAAmE,CAAnE,CAApC;;AACAgB,SAAS,CAACC,YAAV,CAAwB,IAAxB,EAA8B,IAAIjB,sBAAJ,CAA4B,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAA5B,EAAkD,CAAlD,CAA9B;;AAEA,MAAMkB,cAAN,CAAqB;AAEpBd,EAAAA,WAAW,CAAEe,QAAF,EAAa;AAEvB,SAAKC,KAAL,GAAa,IAAIlB,IAAJ,CAAUc,SAAV,EAAqBG,QAArB,CAAb;AAEA;;AAEDL,EAAAA,OAAO,GAAG;AAET,SAAKM,KAAL,CAAWC,QAAX,CAAoBP,OAApB;AAEA;;AAEDH,EAAAA,MAAM,CAAEW,QAAF,EAAa;AAElBA,IAAAA,QAAQ,CAACX,MAAT,CAAiB,KAAKS,KAAtB,EAA6BL,OAA7B;AAEA;;AAED,MAAII,QAAJ,GAAe;AAEd,WAAO,KAAKC,KAAL,CAAWD,QAAlB;AAEA;;AAED,MAAIA,QAAJ,CAAcI,KAAd,EAAsB;AAErB,SAAKH,KAAL,CAAWD,QAAX,GAAsBI,KAAtB;AAEA;;AA9BmB;;AAkCrB,SAASpB,IAAT,EAAee,cAAf","sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"]},"metadata":{},"sourceType":"module"}