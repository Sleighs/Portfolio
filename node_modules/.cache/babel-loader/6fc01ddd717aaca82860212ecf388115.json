{"ast":null,"code":"/**\n * @fileOverview Contains definition of the core graph object.\n */\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nmodule.exports = createGraph;\n\nvar eventify = require('ngraph.events');\n/**\n * Creates a new graph\n */\n\n\nfunction createGraph(options) {\n  // Graph structure is maintained as dictionary of nodes\n  // and array of links. Each node has 'links' property which\n  // hold all links related to that node. And general links\n  // array is used to speed up all links enumeration. This is inefficient\n  // in terms of memory, but simplifies coding.\n  options = options || {};\n\n  if ('uniqueLinkId' in options) {\n    console.warn('ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' + 'Use `multigraph` option instead\\n', '\\n', 'Note: there is also change in default behavior: From now on each graph\\n' + 'is considered to be not a multigraph by default (each edge is unique).');\n    options.multigraph = options.uniqueLinkId;\n  } // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n\n\n  if (options.multigraph === undefined) options.multigraph = false;\n\n  if (typeof Map !== 'function') {\n    // TODO: Should we polyfill it ourselves? We don't use much operations there..\n    throw new Error('ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph');\n  }\n\n  var nodes = new Map(); // nodeId => Node\n\n  var links = new Map(); // linkId => Link\n  // Hash of multi-edges. Used to track ids of edges between same nodes\n\n  var multiEdges = {};\n  var suspendEvents = 0;\n  var createLink = options.multigraph ? createUniqueLink : createSingleLink,\n      // Our graph API provides means to listen to graph changes. Users can subscribe\n  // to be notified about changes in the graph by using `on` method. However\n  // in some cases they don't use it. To avoid unnecessary memory consumption\n  // we will not record graph changes until we have at least one subscriber.\n  // Code below supports this optimization.\n  //\n  // Accumulates all changes made during graph updates.\n  // Each change element contains:\n  //  changeType - one of the strings: 'add', 'remove' or 'update';\n  //  node - if change is related to node this property is set to changed graph's node;\n  //  link - if change is related to link this property is set to changed graph's link;\n  changes = [],\n      recordLinkChange = noop,\n      recordNodeChange = noop,\n      enterModification = noop,\n      exitModification = noop; // this is our public API:\n\n  var graphPart = {\n    /**\n     * Sometimes duck typing could be slow. Giving clients a hint about data structure\n     * via explicit version number here:\n     */\n    version: 20.0,\n\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodeCount: getNodeCount,\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinkCount: getLinkCount,\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getEdgeCount: getLinkCount,\n\n    /**\n     * Synonym for `getLinkCount()`\n     */\n    getLinksCount: getLinkCount,\n\n    /**\n     * Synonym for `getNodeCount()`\n     */\n    getNodesCount: getNodeCount,\n\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Set of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonym for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonym for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one; undefined otherwise.\n     */\n    getLink: getLink\n  }; // this will add `on()` and `fire()` methods.\n\n  eventify(graphPart);\n  monitorSubscribers();\n  return graphPart;\n\n  function monitorSubscribers() {\n    var realOn = graphPart.on; // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n\n    graphPart.on = on;\n\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal; // this will replace current `on` method with real pub/sub from `eventify`.\n\n      graphPart.on = realOn; // delegate to real `on` handler:\n\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n\n    enterModification();\n    var node = getNode(nodeId);\n\n    if (!node) {\n      node = new Node(nodeId, data);\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n\n    nodes.set(nodeId, node);\n    exitModification();\n    return node;\n  }\n\n  function getNode(nodeId) {\n    return nodes.get(nodeId);\n  }\n\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n\n    if (!node) {\n      return false;\n    }\n\n    enterModification();\n    var prevLinks = node.links;\n\n    if (prevLinks) {\n      prevLinks.forEach(removeLinkInstance);\n      node.links = null;\n    }\n\n    nodes.delete(nodeId);\n    recordNodeChange(node, 'remove');\n    exitModification();\n    return true;\n  }\n\n  function addLink(fromId, toId, data) {\n    enterModification();\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n    var link = createLink(fromId, toId, data);\n    var isUpdate = links.has(link.id);\n    links.set(link.id, link); // TODO: this is not cool. On large graphs potentially would consume more memory.\n\n    addLinkToNode(fromNode, link);\n\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n\n    recordLinkChange(link, isUpdate ? 'update' : 'add');\n    exitModification();\n    return link;\n  }\n\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    var prevLink = links.get(linkId);\n\n    if (prevLink) {\n      prevLink.data = data;\n      return prevLink;\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Find a better/faster way to store multigraphs\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n\n      var suffix = '@' + ++multiEdges[linkId];\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function getNodeCount() {\n    return nodes.size;\n  }\n\n  function getLinkCount() {\n    return links.size;\n  }\n\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n\n  function removeLink(link, otherId) {\n    if (otherId !== undefined) {\n      link = getLink(link, otherId);\n    }\n\n    return removeLinkInstance(link);\n  }\n\n  function removeLinkInstance(link) {\n    if (!link) {\n      return false;\n    }\n\n    if (!links.get(link.id)) return false;\n    enterModification();\n    links.delete(link.id);\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n\n    if (fromNode) {\n      fromNode.links.delete(link);\n    }\n\n    if (toNode) {\n      toNode.links.delete(link);\n    }\n\n    recordLinkChange(link, 'remove');\n    exitModification();\n    return true;\n  }\n\n  function getLink(fromNodeId, toNodeId) {\n    if (fromNodeId === undefined || toNodeId === undefined) return undefined;\n    return links.get(makeLinkId(fromNodeId, toNodeId));\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function (node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n\n  function forEachLink(callback) {\n    if (typeof callback === 'function') {\n      var valuesIterator = links.values();\n      var nextValue = valuesIterator.next();\n\n      while (!nextValue.done) {\n        if (callback(nextValue.value)) {\n          return true; // client doesn't want to proceed. Return.\n        }\n\n        nextValue = valuesIterator.next();\n      }\n    }\n  }\n\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  } // eslint-disable-next-line no-shadow\n\n\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n\n    while (!nextValue.done) {\n      var link = nextValue.value;\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n      quitFast = callback(nodes.get(linkedNodeId), link);\n\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n\n      nextValue = valuesIterator.next();\n    }\n  } // eslint-disable-next-line no-shadow\n\n\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n\n    while (!nextValue.done) {\n      var link = nextValue.value;\n\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes.get(link.toId), link);\n\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n\n      nextValue = valuesIterator.next();\n    }\n  } // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n\n\n  function noop() {} // Enter, Exit modification allows bulk graph updates without firing events.\n\n\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n\n  function exitModificationReal() {\n    suspendEvents -= 1;\n\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n\n  function forEachNode(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Function is expected to iterate over graph nodes. You passed ' + callback);\n    }\n\n    var valuesIterator = nodes.values();\n    var nextValue = valuesIterator.next();\n\n    while (!nextValue.done) {\n      if (callback(nextValue.value)) {\n        return true; // client doesn't want to proceed. Return.\n      }\n\n      nextValue = valuesIterator.next();\n    }\n  }\n}\n/**\n * Internal structure to represent node;\n */\n\n\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\n\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.add(link);\n  } else {\n    node.links = new Set([link]);\n  }\n}\n/**\n * Internal structure to represent links;\n */\n\n\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\n\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '👉 ' + toId.toString();\n}","map":{"version":3,"sources":["/Users/samuelwright/Projects/portfolio/node_modules/ngraph.graph/index.js"],"names":["module","exports","createGraph","eventify","require","options","console","warn","multigraph","uniqueLinkId","undefined","Map","Error","nodes","links","multiEdges","suspendEvents","createLink","createUniqueLink","createSingleLink","changes","recordLinkChange","noop","recordNodeChange","enterModification","exitModification","graphPart","version","addNode","addLink","removeLink","removeNode","getNode","getNodeCount","getLinkCount","getEdgeCount","getLinksCount","getNodesCount","getLinks","forEachNode","forEachLinkedNode","forEachLink","beginUpdate","endUpdate","clear","hasLink","getLink","hasNode","monitorSubscribers","realOn","on","enterModificationReal","exitModificationReal","recordLinkChangeReal","recordNodeChangeReal","apply","arguments","link","changeType","push","node","nodeId","data","Node","set","get","prevLinks","forEach","removeLinkInstance","delete","fromId","toId","fromNode","toNode","isUpdate","has","id","addLinkToNode","linkId","makeLinkId","prevLink","Link","isMultiEdge","hasOwnProperty","suffix","size","otherId","fromNodeId","toNodeId","callback","valuesIterator","values","nextValue","next","done","value","oriented","forEachOrientedLink","forEachNonOrientedLink","quitFast","linkedNodeId","length","fire","add","Set","toString"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAtB;AAEA;AACA;AACA;;;AACA,SAASF,WAAT,CAAqBG,OAArB,EAA8B;AAC5B;AACA;AACA;AACA;AACA;AACAA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,MAAI,kBAAkBA,OAAtB,EAA+B;AAC7BC,IAAAA,OAAO,CAACC,IAAR,CACE,6EACA,mCAFF,EAGE,IAHF,EAIE,6EACA,wEALF;AAQAF,IAAAA,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,YAA7B;AACD,GAjB2B,CAmB5B;AACA;AACA;;;AACA,MAAIJ,OAAO,CAACG,UAAR,KAAuBE,SAA3B,EAAsCL,OAAO,CAACG,UAAR,GAAqB,KAArB;;AAEtC,MAAI,OAAOG,GAAP,KAAe,UAAnB,EAA+B;AAC7B;AACA,UAAM,IAAIC,KAAJ,CAAU,mFAAV,CAAN;AACD;;AAED,MAAIC,KAAK,GAAG,IAAIF,GAAJ,EAAZ,CA7B4B,CA6BL;;AACvB,MAAIG,KAAK,GAAG,IAAIH,GAAJ,EAAZ,CA9B4B,CA8BL;AACrB;;AACF,MAAII,UAAU,GAAG,EAAjB;AACA,MAAIC,aAAa,GAAG,CAApB;AAEA,MAAIC,UAAU,GAAGZ,OAAO,CAACG,UAAR,GAAqBU,gBAArB,GAAwCC,gBAAzD;AAAA,MAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,GAAG,EAbZ;AAAA,MAcEC,gBAAgB,GAAGC,IAdrB;AAAA,MAeEC,gBAAgB,GAAGD,IAfrB;AAAA,MAgBEE,iBAAiB,GAAGF,IAhBtB;AAAA,MAiBEG,gBAAgB,GAAGH,IAjBrB,CAnC4B,CAsD5B;;AACA,MAAII,SAAS,GAAG;AACd;AACJ;AACA;AACA;AACIC,IAAAA,OAAO,EAAE,IALK;;AAOd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAEA,OAjBK;;AAmBd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAEA,OA9BK;;AAgCd;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAEA,UAvCE;;AAyCd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAEA,UAjDE;;AAmDd;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAEA,OA1DK;;AA4Dd;AACJ;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAEA,YAjEA;;AAmEd;AACJ;AACA;AACIC,IAAAA,YAAY,EAAEA,YAtEA;;AAwEd;AACJ;AACA;AACIC,IAAAA,YAAY,EAAED,YA3EA;;AA6Ed;AACJ;AACA;AACIE,IAAAA,aAAa,EAAEF,YAhFD;;AAkFd;AACJ;AACA;AACIG,IAAAA,aAAa,EAAEJ,YArFD;;AAuFd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIK,IAAAA,QAAQ,EAAEA,QAhGI;;AAkGd;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAEA,WAxGC;;AA0Gd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAEA,iBAlHL;;AAoHd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAEA,WA/HC;;AAiId;AACJ;AACA;AACA;AACIC,IAAAA,WAAW,EAAElB,iBArIC;;AAuId;AACJ;AACA;AACA;AACImB,IAAAA,SAAS,EAAElB,gBA3IG;;AA6Id;AACJ;AACA;AACImB,IAAAA,KAAK,EAAEA,KAhJO;;AAkJd;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAEC,OAzJK;;AA2Jd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAEf,OAnKK;;AAqKd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIc,IAAAA,OAAO,EAAEA;AA9KK,GAAhB,CAvD4B,CAwO5B;;AACA3C,EAAAA,QAAQ,CAACuB,SAAD,CAAR;AAEAsB,EAAAA,kBAAkB;AAElB,SAAOtB,SAAP;;AAEA,WAASsB,kBAAT,GAA8B;AAC5B,QAAIC,MAAM,GAAGvB,SAAS,CAACwB,EAAvB,CAD4B,CAG5B;AACA;;AACAxB,IAAAA,SAAS,CAACwB,EAAV,GAAeA,EAAf;;AAEA,aAASA,EAAT,GAAc;AACZ;AACAxB,MAAAA,SAAS,CAACgB,WAAV,GAAwBlB,iBAAiB,GAAG2B,qBAA5C;AACAzB,MAAAA,SAAS,CAACiB,SAAV,GAAsBlB,gBAAgB,GAAG2B,oBAAzC;AACA/B,MAAAA,gBAAgB,GAAGgC,oBAAnB;AACA9B,MAAAA,gBAAgB,GAAG+B,oBAAnB,CALY,CAOZ;;AACA5B,MAAAA,SAAS,CAACwB,EAAV,GAAeD,MAAf,CARY,CASZ;;AACA,aAAOA,MAAM,CAACM,KAAP,CAAa7B,SAAb,EAAwB8B,SAAxB,CAAP;AACD;AACF;;AAED,WAASH,oBAAT,CAA8BI,IAA9B,EAAoCC,UAApC,EAAgD;AAC9CtC,IAAAA,OAAO,CAACuC,IAAR,CAAa;AACXF,MAAAA,IAAI,EAAEA,IADK;AAEXC,MAAAA,UAAU,EAAEA;AAFD,KAAb;AAID;;AAED,WAASJ,oBAAT,CAA8BM,IAA9B,EAAoCF,UAApC,EAAgD;AAC9CtC,IAAAA,OAAO,CAACuC,IAAR,CAAa;AACXC,MAAAA,IAAI,EAAEA,IADK;AAEXF,MAAAA,UAAU,EAAEA;AAFD,KAAb;AAID;;AAED,WAAS9B,OAAT,CAAiBiC,MAAjB,EAAyBC,IAAzB,EAA+B;AAC7B,QAAID,MAAM,KAAKnD,SAAf,EAA0B;AACxB,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAEDY,IAAAA,iBAAiB;AAEjB,QAAIoC,IAAI,GAAG5B,OAAO,CAAC6B,MAAD,CAAlB;;AACA,QAAI,CAACD,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,IAAIG,IAAJ,CAASF,MAAT,EAAiBC,IAAjB,CAAP;AACAvC,MAAAA,gBAAgB,CAACqC,IAAD,EAAO,KAAP,CAAhB;AACD,KAHD,MAGO;AACLA,MAAAA,IAAI,CAACE,IAAL,GAAYA,IAAZ;AACAvC,MAAAA,gBAAgB,CAACqC,IAAD,EAAO,QAAP,CAAhB;AACD;;AAED/C,IAAAA,KAAK,CAACmD,GAAN,CAAUH,MAAV,EAAkBD,IAAlB;AAEAnC,IAAAA,gBAAgB;AAChB,WAAOmC,IAAP;AACD;;AAED,WAAS5B,OAAT,CAAiB6B,MAAjB,EAAyB;AACvB,WAAOhD,KAAK,CAACoD,GAAN,CAAUJ,MAAV,CAAP;AACD;;AAED,WAAS9B,UAAT,CAAoB8B,MAApB,EAA4B;AAC1B,QAAID,IAAI,GAAG5B,OAAO,CAAC6B,MAAD,CAAlB;;AACA,QAAI,CAACD,IAAL,EAAW;AACT,aAAO,KAAP;AACD;;AAEDpC,IAAAA,iBAAiB;AAEjB,QAAI0C,SAAS,GAAGN,IAAI,CAAC9C,KAArB;;AACA,QAAIoD,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACC,OAAV,CAAkBC,kBAAlB;AACAR,MAAAA,IAAI,CAAC9C,KAAL,GAAa,IAAb;AACD;;AAEDD,IAAAA,KAAK,CAACwD,MAAN,CAAaR,MAAb;AAEAtC,IAAAA,gBAAgB,CAACqC,IAAD,EAAO,QAAP,CAAhB;AAEAnC,IAAAA,gBAAgB;AAEhB,WAAO,IAAP;AACD;;AAGD,WAASI,OAAT,CAAiByC,MAAjB,EAAyBC,IAAzB,EAA+BT,IAA/B,EAAqC;AACnCtC,IAAAA,iBAAiB;AAEjB,QAAIgD,QAAQ,GAAGxC,OAAO,CAACsC,MAAD,CAAP,IAAmB1C,OAAO,CAAC0C,MAAD,CAAzC;AACA,QAAIG,MAAM,GAAGzC,OAAO,CAACuC,IAAD,CAAP,IAAiB3C,OAAO,CAAC2C,IAAD,CAArC;AAEA,QAAId,IAAI,GAAGxC,UAAU,CAACqD,MAAD,EAASC,IAAT,EAAeT,IAAf,CAArB;AACA,QAAIY,QAAQ,GAAG5D,KAAK,CAAC6D,GAAN,CAAUlB,IAAI,CAACmB,EAAf,CAAf;AAEA9D,IAAAA,KAAK,CAACkD,GAAN,CAAUP,IAAI,CAACmB,EAAf,EAAmBnB,IAAnB,EATmC,CAWnC;;AACAoB,IAAAA,aAAa,CAACL,QAAD,EAAWf,IAAX,CAAb;;AACA,QAAIa,MAAM,KAAKC,IAAf,EAAqB;AACnB;AACAM,MAAAA,aAAa,CAACJ,MAAD,EAAShB,IAAT,CAAb;AACD;;AAEDpC,IAAAA,gBAAgB,CAACoC,IAAD,EAAOiB,QAAQ,GAAG,QAAH,GAAc,KAA7B,CAAhB;AAEAjD,IAAAA,gBAAgB;AAEhB,WAAOgC,IAAP;AACD;;AAED,WAAStC,gBAAT,CAA0BmD,MAA1B,EAAkCC,IAAlC,EAAwCT,IAAxC,EAA8C;AAC5C,QAAIgB,MAAM,GAAGC,UAAU,CAACT,MAAD,EAASC,IAAT,CAAvB;AACA,QAAIS,QAAQ,GAAGlE,KAAK,CAACmD,GAAN,CAAUa,MAAV,CAAf;;AACA,QAAIE,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAClB,IAAT,GAAgBA,IAAhB;AACA,aAAOkB,QAAP;AACD;;AAED,WAAO,IAAIC,IAAJ,CAASX,MAAT,EAAiBC,IAAjB,EAAuBT,IAAvB,EAA6BgB,MAA7B,CAAP;AACD;;AAED,WAAS5D,gBAAT,CAA0BoD,MAA1B,EAAkCC,IAAlC,EAAwCT,IAAxC,EAA8C;AAC5C;AACA,QAAIgB,MAAM,GAAGC,UAAU,CAACT,MAAD,EAASC,IAAT,CAAvB;AACA,QAAIW,WAAW,GAAGnE,UAAU,CAACoE,cAAX,CAA0BL,MAA1B,CAAlB;;AACA,QAAII,WAAW,IAAIpC,OAAO,CAACwB,MAAD,EAASC,IAAT,CAA1B,EAA0C;AACxC,UAAI,CAACW,WAAL,EAAkB;AAChBnE,QAAAA,UAAU,CAAC+D,MAAD,CAAV,GAAqB,CAArB;AACD;;AACD,UAAIM,MAAM,GAAG,MAAO,EAAErE,UAAU,CAAC+D,MAAD,CAAhC;AACAA,MAAAA,MAAM,GAAGC,UAAU,CAACT,MAAM,GAAGc,MAAV,EAAkBb,IAAI,GAAGa,MAAzB,CAAnB;AACD;;AAED,WAAO,IAAIH,IAAJ,CAASX,MAAT,EAAiBC,IAAjB,EAAuBT,IAAvB,EAA6BgB,MAA7B,CAAP;AACD;;AAED,WAAS7C,YAAT,GAAwB;AACtB,WAAOpB,KAAK,CAACwE,IAAb;AACD;;AAED,WAASnD,YAAT,GAAwB;AACtB,WAAOpB,KAAK,CAACuE,IAAb;AACD;;AAED,WAAS/C,QAAT,CAAkBuB,MAAlB,EAA0B;AACxB,QAAID,IAAI,GAAG5B,OAAO,CAAC6B,MAAD,CAAlB;AACA,WAAOD,IAAI,GAAGA,IAAI,CAAC9C,KAAR,GAAgB,IAA3B;AACD;;AAED,WAASgB,UAAT,CAAoB2B,IAApB,EAA0B6B,OAA1B,EAAmC;AACjC,QAAIA,OAAO,KAAK5E,SAAhB,EAA2B;AACzB+C,MAAAA,IAAI,GAAGX,OAAO,CAACW,IAAD,EAAO6B,OAAP,CAAd;AACD;;AACD,WAAOlB,kBAAkB,CAACX,IAAD,CAAzB;AACD;;AAED,WAASW,kBAAT,CAA4BX,IAA5B,EAAkC;AAChC,QAAI,CAACA,IAAL,EAAW;AACT,aAAO,KAAP;AACD;;AACD,QAAI,CAAC3C,KAAK,CAACmD,GAAN,CAAUR,IAAI,CAACmB,EAAf,CAAL,EAAyB,OAAO,KAAP;AAEzBpD,IAAAA,iBAAiB;AAEjBV,IAAAA,KAAK,CAACuD,MAAN,CAAaZ,IAAI,CAACmB,EAAlB;AAEA,QAAIJ,QAAQ,GAAGxC,OAAO,CAACyB,IAAI,CAACa,MAAN,CAAtB;AACA,QAAIG,MAAM,GAAGzC,OAAO,CAACyB,IAAI,CAACc,IAAN,CAApB;;AAEA,QAAIC,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC1D,KAAT,CAAeuD,MAAf,CAAsBZ,IAAtB;AACD;;AAED,QAAIgB,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAAC3D,KAAP,CAAauD,MAAb,CAAoBZ,IAApB;AACD;;AAEDpC,IAAAA,gBAAgB,CAACoC,IAAD,EAAO,QAAP,CAAhB;AAEAhC,IAAAA,gBAAgB;AAEhB,WAAO,IAAP;AACD;;AAED,WAASqB,OAAT,CAAiByC,UAAjB,EAA6BC,QAA7B,EAAuC;AACrC,QAAID,UAAU,KAAK7E,SAAf,IAA4B8E,QAAQ,KAAK9E,SAA7C,EAAwD,OAAOA,SAAP;AACxD,WAAOI,KAAK,CAACmD,GAAN,CAAUc,UAAU,CAACQ,UAAD,EAAaC,QAAb,CAApB,CAAP;AACD;;AAED,WAAS5C,KAAT,GAAiB;AACfpB,IAAAA,iBAAiB;AACjBe,IAAAA,WAAW,CAAC,UAASqB,IAAT,EAAe;AACzB7B,MAAAA,UAAU,CAAC6B,IAAI,CAACgB,EAAN,CAAV;AACD,KAFU,CAAX;AAGAnD,IAAAA,gBAAgB;AACjB;;AAED,WAASgB,WAAT,CAAqBgD,QAArB,EAA+B;AAC7B,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAIC,cAAc,GAAG5E,KAAK,CAAC6E,MAAN,EAArB;AACA,UAAIC,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAhB;;AACA,aAAO,CAACD,SAAS,CAACE,IAAlB,EAAwB;AACtB,YAAIL,QAAQ,CAACG,SAAS,CAACG,KAAX,CAAZ,EAA+B;AAC7B,iBAAO,IAAP,CAD6B,CAChB;AACd;;AACDH,QAAAA,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAZ;AACD;AACF;AACF;;AAED,WAASrD,iBAAT,CAA2BqB,MAA3B,EAAmC4B,QAAnC,EAA6CO,QAA7C,EAAuD;AACrD,QAAIpC,IAAI,GAAG5B,OAAO,CAAC6B,MAAD,CAAlB;;AAEA,QAAID,IAAI,IAAIA,IAAI,CAAC9C,KAAb,IAAsB,OAAO2E,QAAP,KAAoB,UAA9C,EAA0D;AACxD,UAAIO,QAAJ,EAAc;AACZ,eAAOC,mBAAmB,CAACrC,IAAI,CAAC9C,KAAN,EAAa+C,MAAb,EAAqB4B,QAArB,CAA1B;AACD,OAFD,MAEO;AACL,eAAOS,sBAAsB,CAACtC,IAAI,CAAC9C,KAAN,EAAa+C,MAAb,EAAqB4B,QAArB,CAA7B;AACD;AACF;AACF,GA3c2B,CA6c5B;;;AACA,WAASS,sBAAT,CAAgCpF,KAAhC,EAAuC+C,MAAvC,EAA+C4B,QAA/C,EAAyD;AACvD,QAAIU,QAAJ;AAEA,QAAIT,cAAc,GAAG5E,KAAK,CAAC6E,MAAN,EAArB;AACA,QAAIC,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAhB;;AACA,WAAO,CAACD,SAAS,CAACE,IAAlB,EAAwB;AACtB,UAAIrC,IAAI,GAAGmC,SAAS,CAACG,KAArB;AACA,UAAIK,YAAY,GAAG3C,IAAI,CAACa,MAAL,KAAgBT,MAAhB,GAAyBJ,IAAI,CAACc,IAA9B,GAAqCd,IAAI,CAACa,MAA7D;AACA6B,MAAAA,QAAQ,GAAGV,QAAQ,CAAC5E,KAAK,CAACoD,GAAN,CAAUmC,YAAV,CAAD,EAA0B3C,IAA1B,CAAnB;;AACA,UAAI0C,QAAJ,EAAc;AACZ,eAAO,IAAP,CADY,CACC;AACd;;AACDP,MAAAA,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAZ;AACD;AACF,GA5d2B,CA8d5B;;;AACA,WAASI,mBAAT,CAA6BnF,KAA7B,EAAoC+C,MAApC,EAA4C4B,QAA5C,EAAsD;AACpD,QAAIU,QAAJ;AACA,QAAIT,cAAc,GAAG5E,KAAK,CAAC6E,MAAN,EAArB;AACA,QAAIC,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAhB;;AACA,WAAO,CAACD,SAAS,CAACE,IAAlB,EAAwB;AACtB,UAAIrC,IAAI,GAAGmC,SAAS,CAACG,KAArB;;AACA,UAAItC,IAAI,CAACa,MAAL,KAAgBT,MAApB,EAA4B;AAC1BsC,QAAAA,QAAQ,GAAGV,QAAQ,CAAC5E,KAAK,CAACoD,GAAN,CAAUR,IAAI,CAACc,IAAf,CAAD,EAAuBd,IAAvB,CAAnB;;AACA,YAAI0C,QAAJ,EAAc;AACZ,iBAAO,IAAP,CADY,CACC;AACd;AACF;;AACDP,MAAAA,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAZ;AACD;AACF,GA7e2B,CA+e5B;AACA;;;AACA,WAASvE,IAAT,GAAgB,CAAE,CAjfU,CAmf5B;;;AACA,WAAS6B,qBAAT,GAAiC;AAC/BnC,IAAAA,aAAa,IAAI,CAAjB;AACD;;AAED,WAASoC,oBAAT,GAAgC;AAC9BpC,IAAAA,aAAa,IAAI,CAAjB;;AACA,QAAIA,aAAa,KAAK,CAAlB,IAAuBI,OAAO,CAACiF,MAAR,GAAiB,CAA5C,EAA+C;AAC7C3E,MAAAA,SAAS,CAAC4E,IAAV,CAAe,SAAf,EAA0BlF,OAA1B;AACAA,MAAAA,OAAO,CAACiF,MAAR,GAAiB,CAAjB;AACD;AACF;;AAED,WAAS9D,WAAT,CAAqBkD,QAArB,EAA+B;AAC7B,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAM,IAAI7E,KAAJ,CAAU,kEAAkE6E,QAA5E,CAAN;AACD;;AAED,QAAIC,cAAc,GAAG7E,KAAK,CAAC8E,MAAN,EAArB;AACA,QAAIC,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAhB;;AACA,WAAO,CAACD,SAAS,CAACE,IAAlB,EAAwB;AACtB,UAAIL,QAAQ,CAACG,SAAS,CAACG,KAAX,CAAZ,EAA+B;AAC7B,eAAO,IAAP,CAD6B,CAChB;AACd;;AACDH,MAAAA,SAAS,GAAGF,cAAc,CAACG,IAAf,EAAZ;AACD;AACF;AACF;AAED;AACA;AACA;;;AACA,SAAS9B,IAAT,CAAca,EAAd,EAAkBd,IAAlB,EAAwB;AACtB,OAAKc,EAAL,GAAUA,EAAV;AACA,OAAK9D,KAAL,GAAa,IAAb;AACA,OAAKgD,IAAL,GAAYA,IAAZ;AACD;;AAED,SAASe,aAAT,CAAuBjB,IAAvB,EAA6BH,IAA7B,EAAmC;AACjC,MAAIG,IAAI,CAAC9C,KAAT,EAAgB;AACd8C,IAAAA,IAAI,CAAC9C,KAAL,CAAWyF,GAAX,CAAe9C,IAAf;AACD,GAFD,MAEO;AACLG,IAAAA,IAAI,CAAC9C,KAAL,GAAa,IAAI0F,GAAJ,CAAQ,CAAC/C,IAAD,CAAR,CAAb;AACD;AACF;AAED;AACA;AACA;;;AACA,SAASwB,IAAT,CAAcX,MAAd,EAAsBC,IAAtB,EAA4BT,IAA5B,EAAkCc,EAAlC,EAAsC;AACpC,OAAKN,MAAL,GAAcA,MAAd;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKT,IAAL,GAAYA,IAAZ;AACA,OAAKc,EAAL,GAAUA,EAAV;AACD;;AAED,SAASG,UAAT,CAAoBT,MAApB,EAA4BC,IAA5B,EAAkC;AAChC,SAAOD,MAAM,CAACmC,QAAP,KAAoB,KAApB,GAA4BlC,IAAI,CAACkC,QAAL,EAAnC;AACD","sourcesContent":["/**\n * @fileOverview Contains definition of the core graph object.\n */\n\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nmodule.exports = createGraph;\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates a new graph\n */\nfunction createGraph(options) {\n  // Graph structure is maintained as dictionary of nodes\n  // and array of links. Each node has 'links' property which\n  // hold all links related to that node. And general links\n  // array is used to speed up all links enumeration. This is inefficient\n  // in terms of memory, but simplifies coding.\n  options = options || {};\n  if ('uniqueLinkId' in options) {\n    console.warn(\n      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' +\n      'Use `multigraph` option instead\\n',\n      '\\n',\n      'Note: there is also change in default behavior: From now on each graph\\n'+\n      'is considered to be not a multigraph by default (each edge is unique).'\n    );\n\n    options.multigraph = options.uniqueLinkId;\n  }\n\n  // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n  if (options.multigraph === undefined) options.multigraph = false;\n\n  if (typeof Map !== 'function') {\n    // TODO: Should we polyfill it ourselves? We don't use much operations there..\n    throw new Error('ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph');\n  } \n\n  var nodes = new Map(); // nodeId => Node\n  var links = new Map(); // linkId => Link\n    // Hash of multi-edges. Used to track ids of edges between same nodes\n  var multiEdges = {};\n  var suspendEvents = 0;\n\n  var createLink = options.multigraph ? createUniqueLink : createSingleLink,\n\n    // Our graph API provides means to listen to graph changes. Users can subscribe\n    // to be notified about changes in the graph by using `on` method. However\n    // in some cases they don't use it. To avoid unnecessary memory consumption\n    // we will not record graph changes until we have at least one subscriber.\n    // Code below supports this optimization.\n    //\n    // Accumulates all changes made during graph updates.\n    // Each change element contains:\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\n    //  node - if change is related to node this property is set to changed graph's node;\n    //  link - if change is related to link this property is set to changed graph's link;\n    changes = [],\n    recordLinkChange = noop,\n    recordNodeChange = noop,\n    enterModification = noop,\n    exitModification = noop;\n\n  // this is our public API:\n  var graphPart = {\n    /**\n     * Sometimes duck typing could be slow. Giving clients a hint about data structure\n     * via explicit version number here:\n     */\n    version: 20.0,\n\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodeCount: getNodeCount,\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinkCount: getLinkCount,\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getEdgeCount: getLinkCount,\n\n    /**\n     * Synonym for `getLinkCount()`\n     */\n    getLinksCount: getLinkCount,\n    \n    /**\n     * Synonym for `getNodeCount()`\n     */\n    getNodesCount: getNodeCount,\n\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Set of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonym for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonym for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one; undefined otherwise.\n     */\n    getLink: getLink\n  };\n\n  // this will add `on()` and `fire()` methods.\n  eventify(graphPart);\n\n  monitorSubscribers();\n\n  return graphPart;\n\n  function monitorSubscribers() {\n    var realOn = graphPart.on;\n\n    // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n    graphPart.on = on;\n\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal;\n\n      // this will replace current `on` method with real pub/sub from `eventify`.\n      graphPart.on = realOn;\n      // delegate to real `on` handler:\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n\n    enterModification();\n\n    var node = getNode(nodeId);\n    if (!node) {\n      node = new Node(nodeId, data);\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n\n    nodes.set(nodeId, node);\n\n    exitModification();\n    return node;\n  }\n\n  function getNode(nodeId) {\n    return nodes.get(nodeId);\n  }\n\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n    if (!node) {\n      return false;\n    }\n\n    enterModification();\n\n    var prevLinks = node.links;\n    if (prevLinks) {\n      prevLinks.forEach(removeLinkInstance);\n      node.links = null;\n    }\n\n    nodes.delete(nodeId);\n\n    recordNodeChange(node, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n\n  function addLink(fromId, toId, data) {\n    enterModification();\n\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n\n    var link = createLink(fromId, toId, data);\n    var isUpdate = links.has(link.id);\n\n    links.set(link.id, link);\n\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\n    addLinkToNode(fromNode, link);\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n\n    recordLinkChange(link, isUpdate ? 'update' : 'add');\n\n    exitModification();\n\n    return link;\n  }\n\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    var prevLink = links.get(linkId);\n    if (prevLink) {\n      prevLink.data = data;\n      return prevLink;\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Find a better/faster way to store multigraphs\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n      var suffix = '@' + (++multiEdges[linkId]);\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function getNodeCount() {\n    return nodes.size;\n  }\n\n  function getLinkCount() {\n    return links.size;\n  }\n\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n\n  function removeLink(link, otherId) {\n    if (otherId !== undefined) {\n      link = getLink(link, otherId);\n    }\n    return removeLinkInstance(link);\n  }\n\n  function removeLinkInstance(link) {\n    if (!link) {\n      return false;\n    }\n    if (!links.get(link.id)) return false;\n\n    enterModification();\n\n    links.delete(link.id);\n\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n\n    if (fromNode) {\n      fromNode.links.delete(link);\n    }\n\n    if (toNode) {\n      toNode.links.delete(link);\n    }\n\n    recordLinkChange(link, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n  function getLink(fromNodeId, toNodeId) {\n    if (fromNodeId === undefined || toNodeId === undefined) return undefined;\n    return links.get(makeLinkId(fromNodeId, toNodeId));\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function(node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n\n  function forEachLink(callback) {\n    if (typeof callback === 'function') {\n      var valuesIterator = links.values();\n      var nextValue = valuesIterator.next();\n      while (!nextValue.done) {\n        if (callback(nextValue.value)) {\n          return true; // client doesn't want to proceed. Return.\n        }\n        nextValue = valuesIterator.next();\n      }\n    }\n  }\n\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      var link = nextValue.value;\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n      quitFast = callback(nodes.get(linkedNodeId), link);\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    var valuesIterator = links.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      var link = nextValue.value;\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes.get(link.toId), link);\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n\n  // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n  function noop() {}\n\n  // Enter, Exit modification allows bulk graph updates without firing events.\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n\n  function exitModificationReal() {\n    suspendEvents -= 1;\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n\n  function forEachNode(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Function is expected to iterate over graph nodes. You passed ' + callback);\n    }\n\n    var valuesIterator = nodes.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      if (callback(nextValue.value)) {\n        return true; // client doesn't want to proceed. Return.\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n}\n\n/**\n * Internal structure to represent node;\n */\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\n\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.add(link);\n  } else {\n    node.links = new Set([link]);\n  }\n}\n\n/**\n * Internal structure to represent links;\n */\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\n\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '👉 ' + toId.toString();\n}\n"]},"metadata":{},"sourceType":"script"}