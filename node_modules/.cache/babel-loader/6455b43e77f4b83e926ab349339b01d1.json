{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samuelwright/Projects/portfolio/src/Components/Header.js\";\nimport React, { Component } from 'react';\nimport AppManager from '../AppManager';\nimport '../App.css';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // The algorithm types and deletes each word in the array\n      arr: [\"ENGINEER\", \"ARCHITECT\", \"DEVELOPER\"],\n      pos: 0,\n      text: null,\n      typedText: [],\n      newText: \"\",\n      a: [],\n      reverse: false,\n      interval: null,\n      n: 'start'\n    };\n    this.init = this.init.bind(this);\n    this.getText = this.getText.bind(this);\n  }\n\n  componentDidMount() {\n    AppManager.primaryInterval = setTimeout(() => {\n      this.init('start');\n    }, 1090);\n  }\n\n  getText() {\n    var name = document.getElementById(\"name\");\n    var title = document.getElementById(\"title\");\n    var log = document.getElementById(\"log\");\n    var initBtn = document.getElementById(\"init-btn\"); // Get word from array\n\n    var word = this.state.arr[this.state.pos]; // Transform word from string to array\n\n    var newArr = word.split(\"\");\n    var typedText = this.state.typedText;\n    var reverse = this.state.reverse;\n    var a = this.state.a;\n    var newText = this.state.newText;\n    var newIntervalTime;\n    var r = Math.floor(Math.random() * 600) + 100;\n    newIntervalTime = r; //count += 1;\n    // Delete text if reverse is true\n\n    if (reverse === true) {\n      // Remove last letter from word\n      typedText.splice(-1, 1); // Build new word\n\n      for (var i = a.length; i > typedText.length; i--) {\n        a.splice(-1, 1);\n        newText = a.join(\"\"); // Once word is fully deleted switch to next word\n\n        if (a.join(\"\") === \"\") {\n          typedText = [];\n          reverse = false; //stop after full word delete\n\n          clearInterval(AppManager.interval);\n          AppManager.primaryInterval = setTimeout(() => {\n            this.init('start');\n          }, 1900); // Stops interval after one cycle through word list\n\n          /*if (this.state.pos === this.state.arr.length - 1) {\n              this.setState({\n                n: \"start\"\n              });\n              initBtn.innerHTML = \"Start\";\n              \n              clearInterval(AppManager.interval);\n          }*/\n          // Move to next word or return to first word if at last word\n\n          if (this.state.pos < this.state.arr.length - 1) {\n            this.setState({\n              pos: this.state.pos + 1\n            });\n          } else {\n            this.setState({\n              pos: 0\n            });\n          }\n        }\n      } // Type word if reverse is false\n\n    } else if (!this.state.reverse) {\n      a = []; // Add next letter in word\n\n      typedText.push(newArr[typedText.length]); // Create new word\n\n      for (var j = 0; j < typedText.length; j++) {\n        a.push(newArr[j]);\n        newText = a.join(\"\"); // If new word equals complete word make reverse true to begin delete animation\n\n        if (newText === word) {\n          reverse = true; //stop after full word typed\n\n          clearInterval(AppManager.interval);\n          AppManager.primaryInterval = setTimeout(() => {\n            this.init('start');\n          }, 2800);\n        }\n      }\n    } // Save the typed text for next iteration\n\n\n    this.setState({\n      typedText: typedText,\n      reverse: reverse,\n      a: a,\n      newText: newText\n    });\n  }\n\n  init(type) {\n    var initBtn = document.getElementById(\"init-btn\");\n    var log = document.getElementById(\"log\"); //var rand;\n\n    if (type === \"stop\") {\n      this.setState({\n        n: 'start'\n      });\n      initBtn.innerHTML = \"Start\";\n      clearInterval(AppManager.interval);\n    }\n\n    if (type === \"start\") {\n      this.setState({\n        n: 'stop'\n      });\n      AppManager.interval = setInterval(interval => {\n        this.getText();\n        log.innerHTML = this.state.newText;\n      }, AppManager.newIntervalTime);\n      initBtn.innerHTML = \"Stop\";\n    }\n  }\n\n  render() {\n    let containerStyle = {\n      textAlign: 'center',\n      margin: 'auto',\n      fontSize: '1em',\n      fontWeight: 'bold'\n    };\n    let buttonStyle = {\n      display: 'none'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header-container\",\n      className: \"container-md\",\n      style: containerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"name-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"name\",\n          children: \"SAMUEL WRIGHT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"title\",\n        children: \"SOFTWARE \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"glyph\",\n        children: \" |\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: 'init-btn',\n        onClick: () => {\n          this.init(this.state.n);\n        },\n        style: buttonStyle,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Header;","map":{"version":3,"sources":["/Users/samuelwright/Projects/portfolio/src/Components/Header.js"],"names":["React","Component","AppManager","Header","constructor","props","state","arr","pos","text","typedText","newText","a","reverse","interval","n","init","bind","getText","componentDidMount","primaryInterval","setTimeout","name","document","getElementById","title","log","initBtn","word","newArr","split","newIntervalTime","r","Math","floor","random","splice","i","length","join","clearInterval","setState","push","j","type","innerHTML","setInterval","render","containerStyle","textAlign","margin","fontSize","fontWeight","buttonStyle","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AppManager from '../AppManager';\nimport '../App.css';\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // The algorithm types and deletes each word in the array\n            arr: [\"ENGINEER\", \"ARCHITECT\", \"DEVELOPER\"],\n            pos: 0,\n            text: null,\n            typedText: [],\n            newText: \"\",\n            a: [],\n            reverse: false,\n            interval: null,\n            n: 'start'\n        }\n\n        this.init = this.init.bind(this);\n        this.getText = this.getText.bind(this);\n    }\n    componentDidMount() {\n      AppManager.primaryInterval = setTimeout(()=>{\n        this.init('start');\n      }, 1090)\n      \n    }\n\n    getText() {\n        var name = document.getElementById(\"name\");\n        var title = document.getElementById(\"title\");\n        var log = document.getElementById(\"log\");\n        var initBtn = document.getElementById(\"init-btn\");\n\n        // Get word from array\n        var word = this.state.arr[this.state.pos];\n        // Transform word from string to array\n        var newArr = word.split(\"\");\n\n        var typedText = this.state.typedText;\n        var reverse = this.state.reverse;\n        var a = this.state.a;\n        var newText = this.state.newText;\n\n        var newIntervalTime;\n        var r = Math.floor(Math.random() * 600) + 100;\n        newIntervalTime = r;\n\n        //count += 1;\n      \n        // Delete text if reverse is true\n        if (reverse === true) {\n          // Remove last letter from word\n          typedText.splice(-1, 1);\n          // Build new word\n          for (var i = a.length; i > typedText.length; i--) {\n            a.splice(-1, 1);\n            newText = a.join(\"\");\n      \n            // Once word is fully deleted switch to next word\n            if (a.join(\"\") === \"\") {\n              typedText = [];\n              reverse = false;\n\n              //stop after full word delete\n              clearInterval(AppManager.interval);\n              AppManager.primaryInterval = setTimeout(()=>{\n                this.init('start');\n              }, 1900)\n              \n\n      \n              // Stops interval after one cycle through word list\n              /*if (this.state.pos === this.state.arr.length - 1) {\n                  this.setState({\n                    n: \"start\"\n                  });\n                  initBtn.innerHTML = \"Start\";\n                  \n                  clearInterval(AppManager.interval);\n              }*/\n      \n              // Move to next word or return to first word if at last word\n              if (this.state.pos < this.state.arr.length - 1) {\n                this.setState({\n                    pos: this.state.pos + 1\n                });\n              } else {\n                this.setState({\n                    pos: 0\n                });\n              }\n            }\n          }\n      \n          // Type word if reverse is false\n        } else if (!this.state.reverse) {\n          a = [];\n\n          // Add next letter in word\n          typedText.push(newArr[typedText.length]);\n      \n          // Create new word\n          for (var j = 0; j < typedText.length; j++) {\n            a.push(newArr[j]);\n            newText = a.join(\"\");\n      \n            // If new word equals complete word make reverse true to begin delete animation\n            if (newText === word) {\n              reverse = true;\n\n              //stop after full word typed\n              clearInterval(AppManager.interval);\n              AppManager.primaryInterval = setTimeout(()=>{\n                this.init('start');\n              }, 2800)\n            }\n          }\n        }\n       \n\n        // Save the typed text for next iteration\n        this.setState({\n            typedText: typedText,\n            reverse: reverse,\n            a: a,\n            newText: newText\n\n        })\n      }\n            \n      init(type) {\n        var initBtn = document.getElementById(\"init-btn\");\n        var log = document.getElementById(\"log\");\n\n        //var rand;\n      \n        if (type === \"stop\") {\n            this.setState({\n                n: 'start'\n            });\n          \n          initBtn.innerHTML = \"Start\";\n          clearInterval(AppManager.interval);\n        }\n      \n        if (type === \"start\") {\n            this.setState({\n                n: 'stop'\n            });\n\n            AppManager.interval = setInterval((interval) => {\n                this.getText();\n                log.innerHTML = this.state.newText;\n            }, AppManager.newIntervalTime)\n            initBtn.innerHTML = \"Stop\";\n        }\n      }\n\n\n\n    render (){\n        let containerStyle = {\n            textAlign: 'center',\n            margin: 'auto',\n            fontSize: '1em',\n            fontWeight: 'bold'\n        }\n        let buttonStyle = {\n          display: 'none'\n        }\n        \n        return (\n            <div id=\"header-container\" className={\"container-md\"} style={containerStyle}>\n                <div id=\"name-container\">\n                  <h1 id=\"name\">SAMUEL WRIGHT</h1>\n                </div>\n                <span id=\"title\">SOFTWARE </span>\n                <span id=\"log\"></span>\n                <span id='glyph'> |</span>\n                <button id={'init-btn'} onClick={ ()=>{this.init(this.state.n)}} style={buttonStyle}>Start</button>\n            </div>\n        )\n    }\n}\n\nexport default Header;"]},"metadata":{},"sourceType":"module"}